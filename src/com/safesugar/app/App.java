package com.safesugar.app;


import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Image;

import java.util.Timer;
import java.util.TimerTask;

import com.codename1.notifications.LocalNotification;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class App {

    private Form current;
    private Resources theme;
    private Double currentGlucoseLevel = 1.0;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    
    @SuppressWarnings("deprecation")
	public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        //----------SPLASHSCREEN FORM--------------
        
        Form splash = new Form();
        splash.setLayout(new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
        Container center = new Container(new BoxLayout(BoxLayout.Y_AXIS));

        Label top = new Label("No.More.Lows.");
        center.add(top);
        
        Image logo = theme.getImage("logo3.PNG");
		center.add(logo);
		
        splash.addComponent(BorderLayout.CENTER, center);
        Container tArea = splash.getTitleArea();
        tArea.setUIID("TitleAreaTransparent");
        
        splash.setTransitionOutAnimator(CommonTransitions.createUncover(1, true, 2000));
        splash.show();
        
        
        
        //-------INFORMATION FORM-----------------
        
        Form info = new Form("Safe Sugar");
        info.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        
        Label init = new Label("Initial Reading:");
        info.add(init);
        TextField init_input = new TextField("", "136", 3, TextArea.NUMERIC);
        info.add(init_input);
        
        Label rate = new Label("Target Heart Rate:");
        info.add(rate);
        TextField rate_input = new TextField("", "70", 3, TextArea.NUMERIC);
        info.add(rate_input);
        
        Label age = new Label("Age:");
        info.add(age);
        TextField age_input = new TextField("", "29", 3, TextArea.NUMERIC);
        info.add(age_input);
        
        CheckBox active = new CheckBox("Active");
        active.setSelected(false);
        info.add(active);
        
        CheckBox sedentary = new CheckBox("Sedentary");
        sedentary.setSelected(false);
        info.add(sedentary);
        
        Button start = new Button("Start");
        start.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent evt) {
				Form live = new Form("Safe Sugar");
				live.setLayout(new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
				
				Label feed = new Label();
				live.add(BorderLayout.CENTER, feed);
				
				if((init_input.getText() == "") || (rate_input.getText() == "") || (age_input.getText() == "")){
					Dialog.show("", "All fields must be completed", "ok",null);
				}
				
				else{
					
					if(active.isSelected() == true && sedentary.isSelected() == false){
						Algorithm.EMGPM(init_input.getText(), rate_input.getText(), age_input.getText(), "active");
						
						Timer t = new Timer();
						t.schedule(new TimerTask() {
						    
							@Override
						    public void run() {
								currentGlucoseLevel = Algorithm.metabolized();
								if(currentGlucoseLevel < 80){
									Dialog.show("","Your blood glucose levels are potentially low!", "ok", null);
								}
		        				feed.setText("Live Feed: " + currentGlucoseLevel.intValue() + " mg/dl");
		        				live.revalidate();
						    }
						}, 0, 1000*60);
						 
						Command back = new Command("Back") {
				            public void actionPerformed(ActionEvent ev) {
				                // notice that when showing a previous form it is best to use showBack() so the 
				                // transition runs in reverse
				                info.showBack();
				            }
				       };
				       live.setBackCommand(back);
				       live.setTransitionOutAnimator(CommonTransitions.createUncover(1, true, 2000));
				       live.show();
					}
					
					if(active.isSelected() == false && sedentary.isSelected() == true){
						Algorithm.EMGPM(init_input.getText(), rate_input.getText(), age_input.getText(), "sedentary");
						
						Timer ti = new Timer();
						ti.schedule(new TimerTask() {
						    
							@Override
						    public void run() {
								currentGlucoseLevel = Algorithm.metabolized();
								if(currentGlucoseLevel < 80){
									Dialog.show("","Your blood glucose levels are potentially low!", "ok", null);
								}
		        				feed.setText("Live Feed: " + currentGlucoseLevel.intValue() + " mg/dl");
		        				live.revalidate();
						    }
						}, 0, 1000*60);
						 
						Command back = new Command("Back") {
				            public void actionPerformed(ActionEvent ev) {
				                // notice that when showing a previous form it is best to use showBack() so the 
				                // transition runs in reverse
				                info.showBack();
				            }
				       };
				       live.setBackCommand(back);
				       live.setTransitionOutAnimator(CommonTransitions.createUncover(1, true, 2000));
				       live.show();
					}
					
					if(active.isSelected() == false && sedentary.isSelected() == false){
						Dialog.show("", "A check box must be selected to continue", "ok", null);
					}
					
					if(active.isSelected() == true && sedentary.isSelected() == true){
						Dialog.show("", "Too many check boxes have been selected", "ok",null);
					}
				}
				
			}
        });
        info.add(start);
        
        new java.util.Timer().schedule( 
                new java.util.TimerTask() {
                    @Override
                    public void run() {
                    	info.setTransitionOutAnimator(CommonTransitions.createUncover(1, true, 2000));
                        info.show();
                    }
                }, 
                4000 
        );
		
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
